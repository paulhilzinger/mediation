-- Tables

CREATE TABLE ACCESS_GROUP
(
  GROUP_NAME   VARCHAR2(64 BYTE)                NOT NULL,
  DESCRIPTION  VARCHAR2(128 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE CONFIGURATION_HISTORY
(
  CONFIG_KEY     VARCHAR2(64 BYTE)              NOT NULL,
  CONFIG_NAME    VARCHAR2(64 BYTE)              NOT NULL,
  CONFIG_TYPE    VARCHAR2(64 BYTE)              NOT NULL,
  FOLDER_NAME    VARCHAR2(64 BYTE)              NOT NULL,
  VERSION        NUMBER(5)                      NOT NULL,
  OWNER          VARCHAR2(64 BYTE)              NOT NULL,
  MODIFIED_BY    VARCHAR2(64 BYTE)              NOT NULL,
  MODIFIED_DATE  DATE                           NOT NULL,
  ACCESS_GROUPS  VARCHAR2(256 BYTE)             NOT NULL,
  IS_ENCRYPTED   NUMBER(1)                      NOT NULL,
  COMMENTS       VARCHAR2(2000 BYTE),
  AUX_DATA       VARCHAR2(2000 BYTE),
  DATA           CLOB
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE CS_BUNDLE_ARCHIVE
(
  ID              NUMBER(12)                    NOT NULL,
  BUNDLE_NAME     VARCHAR2(64 BYTE)             NOT NULL,
  CODE_LEVEL      NUMBER(2)                     NOT NULL,
  CREATION_DATE   DATE                          DEFAULT SYSDATE               NOT NULL,
  ORIG_FILENAME   VARCHAR2(128 BYTE)            NOT NULL,
  FAILED_MESSAGE  VARCHAR2(256 BYTE),
  FILE_LENGTH     NUMBER(9)                     NOT NULL,
  CONTENTS        BLOB                          NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE CS_BUNDLE_INHERITANCE
(
  CLASSNAME       VARCHAR2(256 BYTE)            NOT NULL,
  SUPERCLASSNAME  VARCHAR2(256 BYTE)            NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE CS_BUNDLE_RESOURCE
(
  NAME        VARCHAR2(256 BYTE)                NOT NULL,
  ARCHIVE_ID  NUMBER(12)                        NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE CS_PACKAGE
(
  NAME           VARCHAR2(64 BYTE)              NOT NULL,
  VERSION        VARCHAR2(20 BYTE)              NOT NULL,
  REVISION       VARCHAR2(20 BYTE),
  REPOSITORY     VARCHAR2(256 BYTE),
  CREATION_DATE  DATE                           DEFAULT SYSDATE               NOT NULL,
  AUTHOR         VARCHAR2(64 BYTE),
  METADATA       VARCHAR2(128 BYTE),
  RUNTIME        NUMBER(1)                      DEFAULT 0                     NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ECS_ERROR_CODE
(
  ERROR_CODE       VARCHAR2(64 BYTE)            NOT NULL,
  DESCRIPTION      VARCHAR2(256 BYTE),
  REPROCESS_GROUP  NUMBER(5),
  IS_SYSTEM_CODE   NUMBER(1)                    NOT NULL
)
LOGGING 
NOCOMPRESS 
CACHE
NOPARALLEL
MONITORING;

CREATE TABLE DEFAULT_DUPBATCH
(
  ID           NUMBER                           NOT NULL,
  TXN	       NUMBER				NOT NULL,
  TIMESTAMP    DATE                             NOT NULL,
  CRC          NUMBER                           NOT NULL,
  LOGGED_MIMS  VARCHAR2(4000 BYTE),
  TXN_SAFE     NUMBER(1)                        DEFAULT 0                     NOT NULL,
  PROFILE      VARCHAR2(64 BYTE)                NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ECS_BATCH
(
  TXN_ID          NUMBER(12)                    NOT NULL,
  STATE           NUMBER(1)                     NOT NULL,
  WF_NAME         VARCHAR2(128 BYTE)            NOT NULL,
  WF_NODE_NAME    VARCHAR2(128 BYTE)            NOT NULL,
  MESSAGE         VARCHAR2(1024 BYTE),
  INSERT_TIME     DATE                          DEFAULT SYSDATE               NOT NULL,
  SOURCE_NODE     VARCHAR2(128 BYTE),
  ERRORUDR        BLOB,
  ERROR_UDR_TYPE  VARCHAR2(256 BYTE),
  FILELENGTH      NUMBER(12)                    NOT NULL,
  GROUP_ID        NUMBER(5)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ECS_MIM
(
  TXN_ID        NUMBER(12)                      NOT NULL,
  WF_NODE_NAME  VARCHAR2(128 BYTE)              NOT NULL,
  DATATYPE      NUMBER(1)                       NOT NULL,
  NAME          VARCHAR2(128 BYTE)              NOT NULL,
  VALUE         VARCHAR2(256 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE DBAGENT_PENDING_TXN
(
  TXN_ID            NUMBER(12)                  NOT NULL,
  SYSTEM_NAME       VARCHAR2(64 BYTE)           NOT NULL,
  WF_INSTANCE_NAME  VARCHAR2(128 BYTE)          NOT NULL,
  AGENT_ID          NUMBER(12)                  NOT NULL,
  DB_TABLE_SCHEMA   VARCHAR2(128 BYTE)          NOT NULL,
  DB_TABLE_NAME     VARCHAR2(128 BYTE)          NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ECS_GROUP
(
  ID          NUMBER(5)                         NOT NULL,
  GROUP_NAME  VARCHAR2(64 BYTE)                 NOT NULL,
  DATATYPE    NUMBER(1)                         NOT NULL,
  UDR_TYPE    VARCHAR2(256 BYTE)
)
LOGGING 
NOCOMPRESS 
CACHE
NOPARALLEL
MONITORING;

CREATE TABLE ECS_STAT_ENTRY
(
  STAT_ID       NUMBER(6)                       NOT NULL,
  ERROR_CODE    VARCHAR2(64 BYTE)               NOT NULL,
  COUNT_NEW     NUMBER(9)                       NOT NULL,
  COUNT_RP      NUMBER(9)                       NOT NULL,
  NEWEST_ENTRY  DATE                            NOT NULL,
  OLDEST_ENTRY  DATE                            NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ECS_UDR_ERROR
(
  ECS_UDR_ID    NUMBER(12)                      NOT NULL,
  ERROR_CODE    VARCHAR2(64 BYTE)               NOT NULL,
  COMPLETE_MSG  VARCHAR2(256 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE LIC_HEADER
(
  ID        NUMBER(12)                          NOT NULL,
  CONTENTS  BLOB                                NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE SYSTEM_LOG
(
  ID                  NUMBER(12)                NOT NULL,
  SEVERITY_TYPE       NUMBER(1)                 NOT NULL,
  LOG_TYPE            NUMBER(1)                 NOT NULL,
  WF_INSTANCE_NAME    VARCHAR2(128 BYTE),
  WF_GROUP_NAME       VARCHAR2(128 BYTE),
  WF_NODE_NAME        VARCHAR2(128 BYTE),
  IP_ADDRESS          VARCHAR2(64 BYTE),
  PICO_NAME           VARCHAR2(64 BYTE),
  SHORT_MESSAGE       VARCHAR2(128 BYTE)        NOT NULL,
  MESSAGE             VARCHAR2(4000 BYTE)       NOT NULL,
  STACKTRACE          VARCHAR2(3000 BYTE),
  CREATION_TIME       DATE                      DEFAULT SYSDATE               NOT NULL,
  LATEST_OCCURRENCE   DATE                      DEFAULT SYSDATE               NOT NULL,
  OCCURRENCE_COUNTER  NUMBER(10)                DEFAULT 1                     NOT NULL,
  USER_NAME           VARCHAR2(64 BYTE),
  STACKTRACE_HASH     NUMBER(20),
  WF_VERSION          NUMBER(5)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE PICO_CLIENT_STAT
(
  HOST_STAT_ID         NUMBER(9)                NOT NULL,
  CLIENT_NAME          VARCHAR2(64 BYTE)        NOT NULL,
  AVAILABLE_MEM        NUMBER(12)               NOT NULL,
  USED_MEM_AVR         NUMBER(12)               NOT NULL,
  USED_MEM_MIN         NUMBER(12)               NOT NULL,
  USED_MEM_MAX         NUMBER(12)               NOT NULL,
  GC_TIME_AVR          NUMBER(9)                NOT NULL,
  GC_TIME_MIN          NUMBER(9)                NOT NULL,
  GC_TIME_MAX          NUMBER(9)                NOT NULL,
  GC_COUNT_AVR         NUMBER(9)                NOT NULL,
  GC_COUNT_MIN         NUMBER(9)                NOT NULL,
  GC_COUNT_MAX         NUMBER(9)                NOT NULL,
  THREAD_COUNT_AVR     NUMBER(9)                NOT NULL,
  THREAD_COUNT_MIN     NUMBER(9)                NOT NULL,
  THREAD_COUNT_MAX     NUMBER(9)                NOT NULL,
  OPEN_FILE_COUNT_AVR  NUMBER(9)                NOT NULL,
  OPEN_FILE_COUNT_MIN  NUMBER(9)                NOT NULL,
  OPEN_FILE_COUNT_MAX  NUMBER(9)                NOT NULL,
  CPU_TIME_AVR         NUMBER(8,3)              NOT NULL,
  CPU_TIME_MIN         NUMBER(8,3)              NOT NULL,
  CPU_TIME_MAX         NUMBER(8,3)              NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE PICO_HOSTS
(
  IPADDRESS  VARCHAR2(128 BYTE)                 NOT NULL,
  DISABLED   NUMBER(1)                          DEFAULT 0
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE PICO_INSTANCES
(
  IPADDRESS  VARCHAR2(128 BYTE)                 NOT NULL,
  NAME       VARCHAR2(64 BYTE)                  NOT NULL,
  TYPE       VARCHAR2(64 BYTE)                  NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ALARM
(
  ID                     NUMBER(9)              NOT NULL,
  DESCRIPTION            VARCHAR2(200 BYTE)     NOT NULL,
  CONDITIONS             VARCHAR2(500 BYTE)     NOT NULL,
  ALARM_RAISER_NAME      VARCHAR2(130 BYTE)     NOT NULL,
  ALARM_RAISER_KEY       VARCHAR2(64 BYTE)      NOT NULL,
  SUPERVISED_AREA        VARCHAR2(20 BYTE)      NOT NULL,
  SUPERVISED_OBJECT      VARCHAR2(130 BYTE),
  SUPERVISED_OBJECT_KEY  VARCHAR2(130 BYTE),
  STATE                  VARCHAR2(20 BYTE)      NOT NULL,
  SEVERITY               VARCHAR2(20 BYTE)      NOT NULL,
  CREATION_DATE          DATE                   NOT NULL,
  STATE_MODIFIED_DATE    DATE,
  MZ_USER                VARCHAR2(130 BYTE),
  USER_COMMENT           VARCHAR2(2000 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE CONFIGURATION_FOLDER
(
  FOLDER_NAME  VARCHAR2(64 BYTE)                NOT NULL,
  OWNER        VARCHAR2(64 BYTE)                NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE PASSWORD_HISTORY
(
  USERNAME       VARCHAR2(64 BYTE)              NOT NULL,
  PASSWORD       VARCHAR2(128 BYTE)             NOT NULL,
  CREATION_DATE  DATE                           DEFAULT SYSDATE               NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ECS_UDR
(
  ID            NUMBER(12)                      NOT NULL,
  TXN_ID        NUMBER(12)                      NOT NULL,
  STATE         NUMBER(1)                       NOT NULL,
  WF_NAME       VARCHAR2(128 BYTE)              NOT NULL,
  WF_NODE_NAME  VARCHAR2(128 BYTE)              NOT NULL,
  INSERT_TIME   DATE                            DEFAULT SYSDATE               NOT NULL,
  UDR_TYPE      VARCHAR2(256 BYTE)              NOT NULL,
  GROUP_ID      NUMBER(5),
  OFFSET        NUMBER(12)                      NOT NULL,
  LENGTH        NUMBER(9)                       NOT NULL,
  TAG		VARCHAR2(256 BYTE),
  MODIFICATION_TIME	DATE			DEFAULT SYSDATE			NOT NULL,
  SEARCH_FIELD_1  VARCHAR2(256),
  SEARCH_FIELD_2  VARCHAR2(256),
  SEARCH_FIELD_3  VARCHAR2(256),
  SEARCH_FIELD_4  VARCHAR2(256),
  SEARCH_FIELD_5  VARCHAR2(256),
  SEARCH_FIELD_6  VARCHAR2(256),
  SEARCH_FIELD_7  VARCHAR2(256),
  SEARCH_FIELD_8  VARCHAR2(256),
  SEARCH_FIELD_9  VARCHAR2(256),
  SEARCH_FIELD_10 VARCHAR2(256)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE MZ_USER
(
  USERNAME          VARCHAR2(64 BYTE)           NOT NULL,
  FULLNAME          VARCHAR2(128 BYTE)          NOT NULL,
  PASSWORD          VARCHAR2(128 BYTE)          NOT NULL,
  EMAIL             VARCHAR2(128 BYTE)          NOT NULL,
  DEFAULT_GROUP     VARCHAR2(64 BYTE),
  IS_DISABLED       NUMBER(1)                   DEFAULT 0                     NOT NULL,
  METADATA          BLOB,
  FAILED_LOGINS     NUMBER(1)                   DEFAULT 0,
  PASSWORD_CHANGED  DATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE CS_BUNDLE_CLASS
(
  NAME        VARCHAR2(256 BYTE)                NOT NULL,
  ARCHIVE_ID  NUMBER(12)                        NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE CONFIGURATION_DATA
(
  CONFIG_KEY     VARCHAR2(64 BYTE)              NOT NULL,
  CONFIG_NAME    VARCHAR2(64 BYTE)              NOT NULL,
  CONFIG_TYPE    VARCHAR2(64 BYTE)              NOT NULL,
  FOLDER_NAME    VARCHAR2(64 BYTE)              NOT NULL,
  VERSION        NUMBER(5)                      NOT NULL,
  OWNER          VARCHAR2(64 BYTE)              NOT NULL,
  MODIFIED_BY    VARCHAR2(64 BYTE)              NOT NULL,
  MODIFIED_DATE  DATE                           NOT NULL,
  ACCESS_GROUPS  VARCHAR2(256 BYTE)             NOT NULL,
  IS_VALID       NUMBER(1)                      DEFAULT 1                     NOT NULL,
  IS_ENCRYPTED   NUMBER(1)                      NOT NULL,
  AUX_DATA       VARCHAR2(2000 BYTE),
  DATA           CLOB
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE CS_BUNDLE
(
  ID            NUMBER(12)                      NOT NULL,
  PACKAGE_NAME  VARCHAR2(64 BYTE)               NOT NULL,
  NAME          VARCHAR2(64 BYTE)               NOT NULL,
  VERSION       VARCHAR2(20 BYTE)               NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE HOST_STAT
(
  ID                            NUMBER(9)       NOT NULL,
  STAT_DATE                     DATE            NOT NULL,
  RESOLUTION                    VARCHAR2(12 BYTE) NOT NULL,
  HOST_NAME                     VARCHAR2(64 BYTE) NOT NULL,
  WAIT_PROC_AVR                 NUMBER(10)      NOT NULL,
  WAIT_PROC_MIN                 NUMBER(10)      NOT NULL,
  WAIT_PROC_MAX                 NUMBER(10)      NOT NULL,
  SLEEP_PROC_AVR                NUMBER(10)      NOT NULL,
  SLEEP_PROC_MIN                NUMBER(10)      NOT NULL,
  SLEEP_PROC_MAX                NUMBER(10)      NOT NULL,
  SWAP_PROC_AVR                 NUMBER(10)      NOT NULL,
  SWAP_PROC_MIN                 NUMBER(10)      NOT NULL,
  SWAP_PROC_MAX                 NUMBER(10)      NOT NULL,
  FROM_DISK_SWAP_PER_SEC_AVR    NUMBER(10)      NOT NULL,
  FROM_DISK_SWAP_PER_SEC_MIN    NUMBER(10)      NOT NULL,
  FROM_DISK_SWAP_PER_SEC_MAX    NUMBER(10)      NOT NULL,
  TO_DISK_SWAP_PER_SEC_AVR      NUMBER(10)      NOT NULL,
  TO_DISK_SWAP_PER_SEC_MIN      NUMBER(10)      NOT NULL,
  TO_DISK_SWAP_PER_SEC_MAX      NUMBER(10)      NOT NULL,
  CONTEXT_SWITCHES_PER_SEC_AVR  NUMBER(10)      NOT NULL,
  CONTEXT_SWITCHES_PER_SEC_MIN  NUMBER(10)      NOT NULL,
  CONTEXT_SWITCHES_PER_SEC_MAX  NUMBER(10)      NOT NULL,
  USER_TIME_CPU_AVR             NUMBER(3)       NOT NULL,
  USER_TIME_CPU_MIN             NUMBER(3)       NOT NULL,
  USER_TIME_CPU_MAX             NUMBER(3)       NOT NULL,
  SYS_TIME_CPU_AVR              NUMBER(3)       NOT NULL,
  SYS_TIME_CPU_MIN              NUMBER(3)       NOT NULL,
  SYS_TIME_CPU_MAX              NUMBER(3)       NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE APPLICATION_DATA
(
  APP_TYPE      VARCHAR2(64 BYTE)               NOT NULL,
  PERM_NAME     VARCHAR2(128 BYTE)              NOT NULL,
  ACCESS_GROUP  VARCHAR2(64 BYTE)               NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ARCHIVE_ENTRIES
(
  ENTRY_ID          NUMBER,
  TXN_ID            NUMBER                      NOT NULL,
  PROFILE_ID        VARCHAR2(64 BYTE)           NOT NULL,
  PENDING_FILENAME  VARCHAR2(1024 BYTE),
  FINAL_FILENAME    VARCHAR2(1024 BYTE),
  COMPRESSION       NUMBER                      NOT NULL,
  TIMESTAMP         DATE                        NOT NULL,
  WF_INSTANCE_NAME  VARCHAR2(128 BYTE),
  WF_NODE_NAME      VARCHAR2(128 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE MZ_REFERENCE
(
  ORIG_OBJ_ID  VARCHAR2(256 BYTE)               NOT NULL,
  DEST_OBJ_ID  VARCHAR2(256 BYTE)               NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ECS_FILE
(
  TXN_ID    NUMBER(12)                          NOT NULL,
  TXN_SAFE  NUMBER(1)                           DEFAULT 0                     NOT NULL,
  FILENAME  VARCHAR2(256 BYTE)                  NOT NULL,
  DATATYPE  NUMBER(1)                           NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE LIC_LOG
(
  ID        NUMBER(12)                          NOT NULL,
  CONTENTS  BLOB                                NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ARCHIVE_MIMS
(
  ENTRY_ID  NUMBER,
  NAME      VARCHAR2(256 BYTE),
  VALUE     VARCHAR2(256 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE WF_GROUP_DATA
(
  GRP_KEY          VARCHAR2(64 BYTE)            NOT NULL,
  ACTIVATION_MODE  NUMBER(2)                    NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE USER_DEFINED_EVENT
(
  NAME  VARCHAR2(64 BYTE)                       NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE USER_GROUP
(
  USERNAME    VARCHAR2(64 BYTE)                 NOT NULL,
  GROUP_NAME  VARCHAR2(64 BYTE)                 NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE WF_ALARM_VALUE_NAME
(
  NAME  VARCHAR2(64 BYTE)                       NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE WF_INSTANCE_DATA
(
  WF_ID            VARCHAR2(64 BYTE)            NOT NULL,
  ACTIVATION_MODE  NUMBER(2)                    NOT NULL,
  DEBUG_MODE       NUMBER(2)                    NOT NULL,
  CURRENT_EC       VARCHAR2(64 BYTE),
  CURRENT_STATE    NUMBER(2),
  SESSION_ID       NUMBER(10)                   DEFAULT 0
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE TXN_STATUS
(
  ID      NUMBER(12)                            NOT NULL,
  NAME    VARCHAR2(128 BYTE)                    NOT NULL,
  STATUS  NUMBER(2)                             NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE WF_TXN
(
  TXN_ID          NUMBER(12)                    NOT NULL,
  INSTANCE_STATE  BLOB                          NOT NULL,
  INSTANCE_NAME   VARCHAR2(128 BYTE)            NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE WF_STAT
(
  HOST_STAT_ID      NUMBER(9)                   NOT NULL,
  CLIENT_NAME       VARCHAR2(64 BYTE)           NOT NULL,
  WF_NAME           VARCHAR2(128 BYTE)          NOT NULL,
  DATA_COUNTER_AVR  NUMBER(19)                  NOT NULL,
  DATA_COUNTER_MIN  NUMBER(19)                  NOT NULL,
  DATA_COUNTER_MAX  NUMBER(19)                  NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE SYSTEM_LOG_NESTED
(
  SYSTEM_LOG_ID  NUMBER(12)                     NOT NULL,
  NESTED_IDX     NUMBER(2)                      NOT NULL,
  MESSAGE        VARCHAR2(4000 BYTE)            NOT NULL,
  STACKTRACE     VARCHAR2(3000 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ECS_BATCH_ERROR
(
  TXN_ID        NUMBER(12)                      NOT NULL,
  ERROR_CODE    VARCHAR2(64 BYTE)               NOT NULL,
  COMPLETE_MSG  VARCHAR2(256 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ECS_STAT
(
  ID         NUMBER(6)                          NOT NULL,
  STAT_DATE  DATE                               NOT NULL,
  DATATYPE   VARCHAR2(20 BYTE)                  NOT NULL,
  COUNT_NEW  NUMBER(9),
  COUNT_RP   NUMBER(9)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ULTRA_DATA
(
  TYPE   VARCHAR2(256 BYTE)                     NOT NULL,
  VALUE  BLOB                                   NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE WF_QUEUE_STAT (
    HOST_STAT_ID      NUMBER(9),
    CLIENT_NAME	      VARCHAR2(64)  NOT NULL,
    WF_NAME	      VARCHAR2(128) NOT NULL,
    ROUTE_NAME        VARCHAR(128)  NOT NULL,
    ROUTED_UDR_AVR    NUMBER(19)   NOT NULL,
    ROUTED_UDR_MIN    NUMBER(19)   NOT NULL,
    ROUTED_UDR_MAX    NUMBER(19)   NOT NULL,
    QUEUE_SIZE        NUMBER(19)   NOT NULL,
    UDR_ON_QUEUE_AVR  NUMBER(19)   NOT NULL,
    UDR_ON_QUEUE_MIN  NUMBER(19)   NOT NULL,
    UDR_ON_QUEUE_MAX  NUMBER(19)   NOT NULL
) 
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE ECS_CONFIG (
 	TYPE	  VARCHAR2(64)   NOT NULL,
 	NAME	  VARCHAR2(64)   NOT NULL,
	DATA      CLOB           NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

-- Indexes

CREATE UNIQUE INDEX CONFIGURATION_DATA_U_IDX ON CONFIGURATION_DATA
(CONFIG_TYPE, CONFIG_NAME, FOLDER_NAME)
LOGGING
NOPARALLEL;

CREATE INDEX CLIENT_STAT_NAME_IDX ON PICO_CLIENT_STAT
(CLIENT_NAME)
LOGGING
NOPARALLEL
COMPRESS 1;


CREATE INDEX CS_BUNDLE_RESOURCE_IDX ON CS_BUNDLE_RESOURCE
(NAME)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX HOST_STAT_U_IDX ON HOST_STAT
(HOST_NAME, RESOLUTION, STAT_DATE)
LOGGING
NOPARALLEL
COMPRESS 2;

CREATE UNIQUE INDEX ECS_STAT_U_IDX ON ECS_STAT
(STAT_DATE, DATATYPE)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX CS_BUNDLE_U_IDX ON CS_BUNDLE
(ID)
LOGGING
NOPARALLEL;

CREATE INDEX DEFAULT_DUPBATCH_TIME_IDX ON DEFAULT_DUPBATCH
(PROFILE, TIMESTAMP)
LOGGING
NOPARALLEL;

CREATE INDEX ECS_BATCH_ERROR1_IDX ON ECS_BATCH_ERROR
(TXN_ID)
LOGGING
NOPARALLEL;

CREATE INDEX ECS_UDR_ERROR1_IDX ON ECS_UDR_ERROR
(ECS_UDR_ID)
LOGGING
NOPARALLEL;

CREATE INDEX ECS_UDR_ERROR2_IDX ON ECS_UDR_ERROR
(ERROR_CODE, COMPLETE_MSG)
LOGGING
NOPARALLEL;

CREATE INDEX ECS_UDR_TIME_IDX ON ECS_UDR
(INSERT_TIME)
LOGGING
NOPARALLEL;

CREATE INDEX ECS_UDR_WF_IDX ON ECS_UDR
(TXN_ID, WF_NODE_NAME)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_ULTRA_DATA ON ULTRA_DATA
(TYPE)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_TXN_STATUS ON TXN_STATUS
(ID)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_SYSTEM_LOG ON SYSTEM_LOG
(ID)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_REFERENCE ON MZ_REFERENCE
(ORIG_OBJ_ID, DEST_OBJ_ID)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_MZ_USER ON MZ_USER
(USERNAME)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_CS_BUNDLE_ARCHIVE ON CS_BUNDLE_ARCHIVE
(ID)
LOGGING
NOPARALLEL;

CREATE INDEX ALARM_IDX1 ON ALARM
(CREATION_DATE, STATE)
LOGGING
NOPARALLEL;

CREATE INDEX ARCHIVE_MIM_ENTRY_IDX ON ARCHIVE_MIMS
(ENTRY_ID)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_ALARM ON ALARM
(ID)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_ARCHIVE_ENTRIES ON ARCHIVE_ENTRIES
(ENTRY_ID)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_CS_BUNDLE_CLASS_NAME ON CS_BUNDLE_CLASS
(NAME)
LOGGING
NOPARALLEL;

CREATE INDEX ARCHIVE_MAINTAIN_IDX ON ARCHIVE_ENTRIES
(TXN_ID, PROFILE_ID, TIMESTAMP, ENTRY_ID)
LOGGING
NOPARALLEL
COMPRESS 2;

CREATE UNIQUE INDEX PK_CS_BUNDLE ON CS_BUNDLE
(NAME)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_CS_PACKAGE ON CS_PACKAGE
(NAME)
LOGGING
NOPARALLEL;

CREATE INDEX ECS_UDR_TXN_IDX ON ECS_UDR
(TXN_ID)
LOGGING
NOPARALLEL;

CREATE INDEX CS_BUNDLE_INHERITANCE_IDX ON CS_BUNDLE_INHERITANCE
(SUPERCLASSNAME, CLASSNAME)
LOGGING
NOPARALLEL;

CREATE INDEX CLIENT_STAT_HOSTID_IDX ON PICO_CLIENT_STAT
(HOST_STAT_ID)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX ECS_GROUP_IDX ON ECS_GROUP
(GROUP_NAME)
LOGGING
NOPARALLEL;

CREATE INDEX ECS_STAT_ENTRY1_IDX ON ECS_STAT_ENTRY
(ERROR_CODE)
LOGGING
NOPARALLEL;

CREATE INDEX WF_TXN_WF_IDX ON WF_TXN
(INSTANCE_NAME)
LOGGING
NOPARALLEL;

CREATE INDEX SYSTEM_L_IDX ON SYSTEM_LOG
(CREATION_TIME, WF_INSTANCE_NAME, WF_NODE_NAME)
LOGGING
NOPARALLEL;

CREATE INDEX DEFAULT_DUPBATCH_CRC_IDX ON DEFAULT_DUPBATCH
(CRC)
LOGGING
NOPARALLEL;

CREATE INDEX SYSTEM_L_USERIDX ON SYSTEM_LOG
(USER_NAME)
LOGGING
NOPARALLEL
COMPRESS 1;

CREATE UNIQUE INDEX PICO_INSTANCES_U_IDX ON PICO_INSTANCES
(IPADDRESS, NAME, TYPE)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_ECS_BATCH ON ECS_BATCH
(TXN_ID)
LOGGING
NOPARALLEL;

CREATE INDEX SYSTEM_L_NESTED_IDX ON SYSTEM_LOG_NESTED
(SYSTEM_LOG_ID)
LOGGING
NOPARALLEL;

CREATE INDEX WF_STAT_NAME_IDX ON WF_STAT
(WF_NAME)
LOGGING
NOPARALLEL
COMPRESS 1;

CREATE INDEX WF_STAT_HOSTID_IDX ON WF_STAT
(HOST_STAT_ID)
LOGGING
NOPARALLEL;

CREATE INDEX ECS_BATCH_ERROR2_IDX ON ECS_BATCH_ERROR
(ERROR_CODE, COMPLETE_MSG)
LOGGING
NOPARALLEL;

CREATE INDEX ECS1_BATCH_IDX ON ECS_BATCH
(WF_NAME, WF_NODE_NAME)
LOGGING
NOPARALLEL;

CREATE INDEX ARCHIVE_TXN_IDX ON ARCHIVE_ENTRIES
(TXN_ID)
LOGGING
NOPARALLEL
COMPRESS 1;

CREATE UNIQUE INDEX PK_DEFAULT_DUPBATCH ON DEFAULT_DUPBATCH
(ID)
LOGGING
NOPARALLEL;

CREATE INDEX REFERENCE_U_IDX ON MZ_REFERENCE
(DEST_OBJ_ID)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_ECS_STAT ON ECS_STAT
(ID)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_ECS_UDR ON ECS_UDR
(ID)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_HOST_STAT ON HOST_STAT
(ID)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_ECS_FILE ON ECS_FILE
(TXN_ID)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_ECS_GROUP ON ECS_GROUP
(ID)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_ECS_MIM ON ECS_MIM
(TXN_ID, WF_NODE_NAME, NAME)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_ECS_ERROR_CODE ON ECS_ERROR_CODE
(ERROR_CODE)
LOGGING
NOPARALLEL;

CREATE UNIQUE INDEX PK_ECS_CONFIG ON ECS_CONFIG
(TYPE,NAME)
LOGGING
NOPARALLEL;

CREATE INDEX WF_QUEUE_STAT_NAME_IDX ON WF_QUEUE_STAT
(WF_NAME)
LOGGING
NOPARALLEL
COMPRESS 1;

CREATE INDEX WF_QUEUE_STAT_HOSTID_IDX ON WF_QUEUE_STAT
(HOST_STAT_ID)
LOGGING
NOPARALLEL;

-- Sequences

CREATE SEQUENCE LIC_LOG_ID
  START WITH 1
  MAXVALUE 999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;

CREATE SEQUENCE SEQ_CS_BUNDLE_ARCHIVE_ID
  START WITH 1
  MAXVALUE 999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;

CREATE SEQUENCE SEQ_ALARM
  START WITH 1
  MAXVALUE 999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;
  
CREATE SEQUENCE SEQ_CS_BUNDLE_ID
  START WITH 1
  MAXVALUE 999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;

CREATE SEQUENCE SEQ_ARCHIVE_ENTRY_ID
  START WITH 1
  MAXVALUE 999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;

CREATE SEQUENCE SEQ_SYSTEM_LOG_ID
  START WITH 1
  MAXVALUE 999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;

CREATE SEQUENCE SEQ_ECS_UDR
  START WITH 1
  MAXVALUE 999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;

CREATE SEQUENCE SEQ_HOST_STAT
  START WITH 1
  MAXVALUE 999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;

CREATE SEQUENCE SEQ_TXN_STATUS_ID
  START WITH 1
  MAXVALUE 999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;

CREATE SEQUENCE SEQ_ECS_STAT
  START WITH 1
  MAXVALUE 999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;

CREATE SEQUENCE SEQ_ECS_GROUP
  START WITH 1
  MAXVALUE 999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;

CREATE SEQUENCE default_dupbatch_seq
       START WITH 1
       INCREMENT BY 1
       NOMAXVALUE; 
  
-- Triggers

--BEGIN_PLSQL
CREATE OR REPLACE TRIGGER trg_alarm
       BEFORE INSERT ON alarm
REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW
DECLARE ind Integer;
 BEGIN
        SELECT  seq_alarm.NEXTVAL INTO ind FROM DUAL;
        :NEW.id := ind;
END;
/
--END_PLSQL

--BEGIN_PLSQL
CREATE OR REPLACE TRIGGER trg_archive_entry_id
       BEFORE INSERT ON archive_entries
REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW
DECLARE ind Integer;
 BEGIN
        SELECT  seq_archive_entry_id.NEXTVAL INTO ind FROM DUAL;
        :NEW.entry_id := ind;
END;
/
--END_PLSQL

--BEGIN_PLSQL
CREATE OR REPLACE TRIGGER lic_log_id
  BEFORE INSERT ON lic_log
  REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
        SELECT lic_log_id.NEXTVAL INTO :NEW.id FROM DUAL;
END;
/
--END_PLSQL

--BEGIN_PLSQL
CREATE OR REPLACE TRIGGER trg_ecs_udr
       BEFORE INSERT ON ecs_udr
REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW
DECLARE ind Integer;
 BEGIN
        SELECT  seq_ecs_udr.NEXTVAL INTO ind FROM DUAL;
        :NEW.id := ind;
END;
/
--END_PLSQL

--BEGIN_PLSQL
CREATE OR REPLACE TRIGGER trg_ecs_stat
       BEFORE INSERT ON ecs_stat
REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW
DECLARE ind Integer;
BEGIN
        SELECT  seq_ecs_stat.NEXTVAL INTO ind FROM DUAL;
        :NEW.id := ind;
END;
/
--END_PLSQL

--BEGIN_PLSQL
CREATE OR REPLACE TRIGGER trg_txn_status_id
       BEFORE INSERT ON txn_status
REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW
DECLARE ind Integer;
BEGIN
        SELECT  seq_txn_status_id.NEXTVAL INTO ind FROM DUAL;
        :NEW.id := ind;
END;
/
--END_PLSQL

--BEGIN_PLSQL
CREATE OR REPLACE TRIGGER trg_cs_bundle_archive_id
  BEFORE INSERT ON cs_bundle_archive
  REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
        SELECT seq_cs_bundle_archive_id.NEXTVAL INTO :NEW.id FROM DUAL;
END;
/
--END_PLSQL

--BEGIN_PLSQL
CREATE OR REPLACE TRIGGER trg_ecs_group
       BEFORE INSERT ON ecs_group
REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW
DECLARE ind Integer;
BEGIN
        SELECT  seq_ecs_group.NEXTVAL INTO ind FROM DUAL;
        :NEW.id := ind;
END;
/
--END_PLSQL

--BEGIN_PLSQL
CREATE OR REPLACE TRIGGER trg_cs_bundle_id
  BEFORE INSERT ON cs_bundle
  REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
        SELECT seq_cs_bundle_id.NEXTVAL INTO :NEW.id FROM DUAL;
END;
/
--END_PLSQL

--BEGIN_PLSQL
CREATE OR REPLACE TRIGGER trg_host_stat
       BEFORE INSERT ON host_stat
REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW
DECLARE ind Integer;
 BEGIN
        SELECT  seq_host_stat.NEXTVAL INTO ind FROM DUAL;
        :NEW.id := ind;
END;
/
--END_PLSQL

--BEGIN_PLSQL
CREATE OR REPLACE TRIGGER trg_system_log_id BEFORE INSERT ON system_log
REFERENCING OLD AS OLD NEW AS NEW FOR EACH ROW
DECLARE ind Integer;
BEGIN
	SELECT seq_system_log_id.NEXTVAL INTO ind FROM DUAL;
        :NEW.id := ind;
END;
/
--END_PLSQL

--BEGIN_PLSQL
CREATE OR REPLACE TRIGGER default_dupbatch_trigger
       BEFORE INSERT ON default_dupbatch
FOR EACH ROW
BEGIN
        SELECT  default_dupbatch_seq.nextval into :new.id from dual;
END;
/
--END_PLSQL

-- Alters

ALTER TABLE ACCESS_GROUP ADD (
  PRIMARY KEY
 (GROUP_NAME));
 
ALTER TABLE CONFIGURATION_HISTORY ADD (
  PRIMARY KEY
 (CONFIG_KEY, VERSION));
 
ALTER TABLE CS_BUNDLE_ARCHIVE ADD (
   CONSTRAINT PK_CS_BUNDLE_ARCHIVE
  PRIMARY KEY
 (ID));

ALTER TABLE DEFAULT_DUPBATCH ADD (
  CONSTRAINT PK_DEFAULT_DUPBATCH
 PRIMARY KEY
 (ID));
 
ALTER TABLE CS_PACKAGE ADD (
   CONSTRAINT PK_CS_PACKAGE
  PRIMARY KEY
 (NAME));

ALTER TABLE ECS_BATCH ADD (
  CONSTRAINT PK_ECS_BATCH
 PRIMARY KEY
 (TXN_ID));

ALTER TABLE ECS_MIM ADD (
  CONSTRAINT PK_ECS_MIM
 PRIMARY KEY
 (TXN_ID, WF_NODE_NAME, NAME));

ALTER TABLE ECS_GROUP ADD (
  CONSTRAINT PK_ECS_GROUP
 PRIMARY KEY
 (ID));
 
ALTER TABLE ECS_STAT ADD (
  CONSTRAINT PK_ECS_STAT
 PRIMARY KEY
 (ID));

ALTER TABLE ULTRA_DATA ADD (
  CONSTRAINT PK_ULTRA_DATA
 PRIMARY KEY
 (TYPE));

ALTER TABLE USER_GROUP ADD (
  PRIMARY KEY
 (USERNAME, GROUP_NAME));

ALTER TABLE ECS_ERROR_CODE ADD (
  CONSTRAINT PK_ECS_ERROR_CODE
 PRIMARY KEY
 (ERROR_CODE));

ALTER TABLE SYSTEM_LOG ADD (
  CONSTRAINT PK_SYSTEM_LOG
 PRIMARY KEY
 (ID)); 

ALTER TABLE ALARM ADD (
  CONSTRAINT PK_ALARM
 PRIMARY KEY
 (ID));

ALTER TABLE CONFIGURATION_DATA ADD (
  PRIMARY KEY
 (CONFIG_KEY));

ALTER TABLE CONFIGURATION_FOLDER ADD (
  PRIMARY KEY
 (FOLDER_NAME));

ALTER TABLE PICO_HOSTS ADD (
  PRIMARY KEY
 (IPADDRESS));
 
ALTER TABLE PASSWORD_HISTORY ADD (
  PRIMARY KEY
 (USERNAME, PASSWORD));

ALTER TABLE ECS_UDR ADD (
  CONSTRAINT PK_ECS_UDR
 PRIMARY KEY
 (ID));

ALTER TABLE MZ_USER ADD (
  CONSTRAINT PK_MZ_USER
 PRIMARY KEY
 (USERNAME));

ALTER TABLE CS_BUNDLE_CLASS ADD (
  CONSTRAINT PK_CS_BUNDLE_CLASS_NAME
 PRIMARY KEY
 (NAME));

ALTER TABLE CS_BUNDLE ADD (
  CONSTRAINT PK_CS_BUNDLE
 PRIMARY KEY
 (NAME));
 
ALTER TABLE HOST_STAT ADD (
  CONSTRAINT PK_HOST_STAT
 PRIMARY KEY
 (ID));
 
ALTER TABLE ECS_FILE ADD (
  CONSTRAINT PK_ECS_FILE
 PRIMARY KEY
 (TXN_ID));

ALTER TABLE TXN_STATUS ADD (
  CONSTRAINT PK_TXN_STATUS
 PRIMARY KEY
 (ID),
  UNIQUE (NAME));

ALTER TABLE WF_INSTANCE_DATA ADD (
  PRIMARY KEY
 (WF_ID));

ALTER TABLE APPLICATION_DATA ADD (
  PRIMARY KEY
 (APP_TYPE, PERM_NAME, ACCESS_GROUP));

ALTER TABLE ARCHIVE_ENTRIES ADD (
  CONSTRAINT PK_ARCHIVE_ENTRIES
 PRIMARY KEY
 (ENTRY_ID));

ALTER TABLE USER_DEFINED_EVENT ADD (
  PRIMARY KEY
 (NAME));

ALTER TABLE WF_GROUP_DATA ADD (
  PRIMARY KEY
 (GRP_KEY)); 

ALTER TABLE WF_ALARM_VALUE_NAME ADD (
  PRIMARY KEY
 (NAME));

ALTER TABLE ECS_STAT_ENTRY ADD (
  CONSTRAINT FK_ECS_STAT_ID
 FOREIGN KEY (STAT_ID)
 REFERENCES ECS_STAT (ID)
    ON DELETE CASCADE);

ALTER TABLE CS_BUNDLE_ARCHIVE ADD (
  CONSTRAINT FK_CS_BUNDLE_BUNDLE_NAME
 FOREIGN KEY (BUNDLE_NAME)
 REFERENCES CS_BUNDLE (NAME)
    ON DELETE CASCADE);

ALTER TABLE CS_BUNDLE_RESOURCE ADD (
  CONSTRAINT FK_CS_BUNDLE_RESOURCE_A_ID
 FOREIGN KEY (ARCHIVE_ID)
 REFERENCES CS_BUNDLE_ARCHIVE (ID)
    ON DELETE CASCADE);

ALTER TABLE ECS_ERROR_CODE ADD (
  FOREIGN KEY (REPROCESS_GROUP) 
 REFERENCES ECS_GROUP (ID));

ALTER TABLE ECS_BATCH ADD (
  FOREIGN KEY (GROUP_ID) 
 REFERENCES ECS_GROUP (ID),
  CONSTRAINT FK_ECS_BATCH_TXN 
 FOREIGN KEY (TXN_ID) 
 REFERENCES ECS_FILE (TXN_ID));

ALTER TABLE USER_GROUP ADD (
  CONSTRAINT FK_USER_GROUP_GROUPNAME 
 FOREIGN KEY (GROUP_NAME) 
 REFERENCES ACCESS_GROUP (GROUP_NAME),
  CONSTRAINT FK_USER_GROUP_USERNAME 
 FOREIGN KEY (USERNAME) 
 REFERENCES MZ_USER (USERNAME));

ALTER TABLE ECS_MIM ADD (
  CONSTRAINT FK_ECS_MIM_TXN 
 FOREIGN KEY (TXN_ID) 
 REFERENCES ECS_FILE (TXN_ID)
    ON DELETE CASCADE);

ALTER TABLE ECS_UDR_ERROR ADD (
  FOREIGN KEY (ERROR_CODE) 
 REFERENCES ECS_ERROR_CODE (ERROR_CODE),
  CONSTRAINT ECS_UDR_ERROR_FK 
 FOREIGN KEY (ECS_UDR_ID) 
 REFERENCES ECS_UDR (ID)
    ON DELETE CASCADE);

ALTER TABLE PICO_CLIENT_STAT ADD (
  CONSTRAINT FK_PICO_STAT_HOST_ID 
 FOREIGN KEY (HOST_STAT_ID) 
 REFERENCES HOST_STAT (ID)
    ON DELETE CASCADE);
    
ALTER TABLE PICO_INSTANCES ADD (
  CONSTRAINT FK_PI_IPADDRESS 
 FOREIGN KEY (IPADDRESS) 
 REFERENCES PICO_HOSTS (IPADDRESS)
    ON DELETE CASCADE);

ALTER TABLE CONFIGURATION_FOLDER ADD (
  CONSTRAINT FK_CF_OWNER 
 FOREIGN KEY (OWNER) 
 REFERENCES MZ_USER (USERNAME));

ALTER TABLE PASSWORD_HISTORY ADD (
  CONSTRAINT FK_CS_MZ_USER_NAME 
 FOREIGN KEY (USERNAME) 
 REFERENCES MZ_USER (USERNAME)
    ON DELETE CASCADE);

ALTER TABLE ECS_UDR ADD (
  FOREIGN KEY (GROUP_ID) 
 REFERENCES ECS_GROUP (ID),
  CONSTRAINT FK_ECS_UDR_TXN 
 FOREIGN KEY (TXN_ID) 
 REFERENCES ECS_FILE (TXN_ID));

ALTER TABLE MZ_USER ADD (
  CONSTRAINT FK_USER_DEFAULT_GROUP 
 FOREIGN KEY (DEFAULT_GROUP) 
 REFERENCES ACCESS_GROUP (GROUP_NAME)); 

ALTER TABLE CS_BUNDLE_CLASS ADD (
  CONSTRAINT FK_CS_BUNDLE_CLASS_ARCHIVE_ID 
 FOREIGN KEY (ARCHIVE_ID) 
 REFERENCES CS_BUNDLE_ARCHIVE (ID)
    ON DELETE CASCADE);

ALTER TABLE CONFIGURATION_DATA ADD (
  CONSTRAINT FK_CD_OWNER 
 FOREIGN KEY (OWNER) 
 REFERENCES MZ_USER (USERNAME),
  CONSTRAINT FK_CONFIG_DATA_FOLDER_NAME 
 FOREIGN KEY (FOLDER_NAME) 
 REFERENCES CONFIGURATION_FOLDER (FOLDER_NAME));

ALTER TABLE CS_BUNDLE ADD (
  CONSTRAINT FK_CS_BUNDLE_PACKAGE_ID 
 FOREIGN KEY (PACKAGE_NAME) 
 REFERENCES CS_PACKAGE (NAME)
    ON DELETE CASCADE);

ALTER TABLE APPLICATION_DATA ADD (
  CONSTRAINT FK_APP_ACCESS_GROUP 
 FOREIGN KEY (ACCESS_GROUP) 
 REFERENCES ACCESS_GROUP (GROUP_NAME));
 
ALTER TABLE MZ_REFERENCE ADD (
  CONSTRAINT PK_REFERENCE
 PRIMARY KEY
 (ORIG_OBJ_ID, DEST_OBJ_ID));

ALTER TABLE ARCHIVE_MIMS ADD (
  CONSTRAINT ARCHIVE_MIMS_ID_FK 
 FOREIGN KEY (ENTRY_ID) 
 REFERENCES ARCHIVE_ENTRIES (ENTRY_ID)
    ON DELETE CASCADE);

ALTER TABLE WF_STAT ADD (
  CONSTRAINT FK_WF_STAT_HOST_ID 
 FOREIGN KEY (HOST_STAT_ID) 
 REFERENCES HOST_STAT (ID)
    ON DELETE CASCADE);

ALTER TABLE SYSTEM_LOG_NESTED ADD (
  CONSTRAINT FK_SLN_SYSTEM_LOG_ID 
 FOREIGN KEY (SYSTEM_LOG_ID) 
 REFERENCES SYSTEM_LOG (ID));

ALTER TABLE ECS_BATCH_ERROR ADD (
  FOREIGN KEY (ERROR_CODE) 
 REFERENCES ECS_ERROR_CODE (ERROR_CODE),
  CONSTRAINT ECS_BATCH_ERROR_FK 
 FOREIGN KEY (TXN_ID) 
 REFERENCES ECS_BATCH (TXN_ID)
    ON DELETE CASCADE);

ALTER TABLE CS_BUNDLE_INHERITANCE
 ADD CONSTRAINT FK_CS_BUNDLE_CLASS_NAME
 FOREIGN KEY (CLASSNAME)
 REFERENCES CS_BUNDLE_CLASS (NAME)
    ON DELETE CASCADE;

ALTER TABLE WF_QUEUE_STAT ADD (
  CONSTRAINT FK_WF_QUEUE_STAT_HOST_ID 
 FOREIGN KEY (HOST_STAT_ID) 
 REFERENCES HOST_STAT (ID)
    ON DELETE CASCADE);

ALTER TABLE ECS_CONFIG ADD (
  CONSTRAINT PK_ECS_CONFIG
 PRIMARY KEY
 (TYPE,NAME));    

-- Inserts

INSERT INTO access_group (group_name, description) VALUES
  ('Administrator', 'Full privileged group');
  
INSERT INTO access_group (group_name, description) VALUES
  ('All', 'Group where all users are automatically members');

INSERT INTO mz_user (username, fullname, email, password, default_group, is_disabled, metadata, password_changed) VALUES
('mzadmin', 'MZ Administrator', 'mzadmin',
 '32993803465104903760650474495088870400774373023', 'Administrator', 0, empty_blob(), CURRENT_TIMESTAMP); 

INSERT INTO user_group (username, group_name) VALUES ('mzadmin','Administrator');

INSERT INTO configuration_folder(folder_name, owner) VALUES ('Default', 'mzadmin');

INSERT INTO mz_reference(orig_obj_id, dest_obj_id) VALUES ('Folder:Default', 'User:mzadmin');

INSERT INTO ecs_error_code (error_code, description, is_system_code) VALUES
('DUPLICATE_UDR', 'Duplicate UDR reported by DupUDR agent', 1);

INSERT INTO ecs_error_code (error_code, description, is_system_code) VALUES
('AGGR_UNMATCHED_UDR', 'UDR not matching a session reported by Aggregation agent', 1);